{"version":3,"file":"Listas-Dz_jkYQ8.js","sources":["../../src/translations.js","../../src/components/Listas.jsx"],"sourcesContent":["export const translations = {\n  common: {\n    title: 'Gestión de Insumos',\n    save: 'Guardar',\n    cancel: 'Cancelar',\n    delete: 'Eliminar',\n    new: 'Nuevo',\n    actions: 'Acciones',\n    name: 'Nombre',\n    success: {\n      save: 'Registro guardado exitosamente',\n      delete: 'Registro eliminado exitosamente'\n    }\n  },\n  listas: {\n    title: 'Administración de Listas',\n    rubros: 'Rubros',\n    unidades: 'Unidades',\n    areas: 'Áreas',\n    buttons: {\n      newRubro: 'Nuevo Rubro',\n      newUnidad: 'Nueva Unidad',\n      nuevaArea: 'Nueva Área'\n    }\n  },\n  proveedores: {\n    title: 'Administración de Proveedores',\n    fields: {\n      name: 'Nombre',\n      address: 'Dirección',\n      phone: 'Teléfono',\n      email: 'Email'\n    }\n  },\n  insumos: {\n    title: 'Administración de Insumos',\n    fields: {\n      rubro: 'Rubro',\n      elemento: 'Elemento',\n      unidadVenta: 'Unidad de Venta',\n      unidadUso: 'Unidad de Uso',\n      equivalencia: 'Equivalencia',\n      precioBajo: 'Precio Más Bajo',\n      proveedor: 'Proveedor'\n    }\n  },\n  listasPrecios: {\n    title: 'Listas de Precios',\n    fields: {\n      proveedor: 'Proveedor',\n      insumo: 'Insumo',\n      precio: 'Precio',\n      fecha: 'Fecha'\n    }\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Table, Modal, ToastContainer, Toast, Form } from 'react-bootstrap';\nimport api from '../config/api';\nimport { useAuth } from '../contexts/AuthContext';\nimport { translations } from '../translations';\n\nconst Listas = () => {\n  const [rubros, setRubros] = useState([]);\n  const [unidades, setUnidades] = useState([]);\n  const [areas, setAreas] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedList, setSelectedList] = useState('rubros');\n  const [formData, setFormData] = useState({\n    nombre: ''\n  });\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState('success');\n  const [loading, setLoading] = useState(false);\n  const { user } = useAuth();\n\n  // Cargar datos del backend al iniciar\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [rubrosRes, unidadesRes, areasRes] = await Promise.all([\n          api.get('/listas/rubros'),\n          api.get('/listas/unidades'),\n          api.get('/listas/areas')\n        ]);\n\n        setRubros(rubrosRes.data.data);\n        setUnidades(unidadesRes.data.data);\n        setAreas(areasRes.data.data);\n      } catch (error) {\n        console.error('Error cargando datos:', error);\n        showToastMessage('Error al cargar los datos', 'danger');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user) {\n      fetchData();\n    }\n  }, [user]);\n\n  const showToastMessage = (message, type = 'success') => {\n    setToastMessage(message);\n    setToastType(type);\n    setShowToast(true);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!formData.nombre.trim()) {\n      showToastMessage('El nombre no puede estar vacío', 'danger');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      let endpoint = '';\n      \n      if (selectedList === 'rubros') {\n        endpoint = '/listas/rubros';\n      } else if (selectedList === 'unidades') {\n        endpoint = '/listas/unidades';\n      } else if (selectedList === 'areas') {\n        endpoint = '/listas/areas';\n      }\n\n      const response = await api.post(endpoint, { nombre: formData.nombre });\n      \n      // Actualizar el estado correspondiente\n      if (selectedList === 'rubros') {\n        setRubros([...rubros, response.data]);\n      } else if (selectedList === 'unidades') {\n        setUnidades([...unidades, response.data]);\n      } else if (selectedList === 'areas') {\n        setAreas([...areas, response.data]);\n      }\n\n      handleClose();\n      showToastMessage('Registro guardado exitosamente');\n    } catch (error) {\n      console.error('Error al guardar:', error);\n      const errorMessage = error.response?.data?.message || 'Error al guardar el registro';\n      showToastMessage(errorMessage, 'danger');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async (id, listType) => {\n    if (!window.confirm('¿Está seguro que desea eliminar este registro?')) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      let endpoint = '';\n      \n      if (listType === 'rubros') {\n        endpoint = `/listas/rubros/${id}`;\n      } else if (listType === 'unidades') {\n        endpoint = `/listas/unidades/${id}`;\n      } else if (listType === 'areas') {\n        endpoint = `/listas/areas/${id}`;\n      }\n\n      await api.delete(endpoint);\n      \n      // Actualizar el estado correspondiente\n      if (listType === 'rubros') {\n        setRubros(rubros.filter(item => item._id !== id));\n      } else if (listType === 'unidades') {\n        setUnidades(unidades.filter(item => item._id !== id));\n      } else if (listType === 'areas') {\n        setAreas(areas.filter(item => item._id !== id));\n      }\n      \n      showToastMessage('Registro eliminado exitosamente');\n    } catch (error) {\n      console.error('Error al eliminar:', error);\n      const errorMessage = error.response?.data?.message || 'Error al eliminar el registro';\n      showToastMessage(errorMessage, 'danger');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setShowModal(false);\n    setFormData({ nombre: '' });\n  };\n\n  const renderTable = (items, listType) => {\n    if (loading && items.length === 0) {\n      return <div className=\"text-center my-4\">Cargando...</div>;\n    }\n\n    return (\n      <Table striped bordered hover className=\"mt-4\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Nombre</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.length > 0 ? (\n            items.map((item, index) => (\n              <tr key={item._id}>\n                <td>{index + 1}</td>\n                <td>{item.nombre}</td>\n                <td>\n                  <Button \n                    variant=\"danger\" \n                    size=\"sm\"\n                    onClick={() => handleDelete(item._id, listType)}\n                    disabled={loading}\n                  >\n                    {loading ? 'Eliminando...' : 'Eliminar'}\n                  </Button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"3\" className=\"text-center\">\n                {loading ? 'Cargando...' : 'No hay registros'}\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    );\n  };\n\n  const getListTitle = () => {\n    switch(selectedList) {\n      case 'rubros':\n        return 'Rubros';\n      case 'unidades':\n        return 'Unidades';\n      case 'areas':\n        return 'Áreas';\n      default:\n        return 'Listas';\n    }\n  };\n\n  return (\n    <Container className=\"py-4\">\n      <h2 className=\"mb-4\">{getListTitle()}</h2>\n      \n      <Row className=\"mb-4\">\n        <Col>\n          <Button \n            variant=\"primary\" \n            onClick={() => {\n              setSelectedList('rubros');\n              setShowModal(true);\n            }}\n            className=\"me-2\"\n          >\n            {translations.listas.buttons.newRubro}\n          </Button>\n          <Button \n            variant=\"primary\" \n            onClick={() => {\n              setSelectedList('unidades');\n              setShowModal(true);\n            }}\n            className=\"me-2\"\n          >\n            {translations.listas.buttons.newUnidad}\n          </Button>\n          <Button \n            variant=\"primary\" \n            onClick={() => {\n              setSelectedList('areas');\n              setShowModal(true);\n            }}\n          >\n            {translations.listas.buttons.nuevaArea}\n          </Button>\n        </Col>\n      </Row>\n\n      {/* Sección de Rubros */}\n      <div className=\"mb-5\">\n        <div className=\"d-flex justify-content-between align-items-center mb-3\">\n          <h3>Rubros</h3>\n          <Button \n            variant=\"outline-primary\" \n            size=\"sm\"\n            onClick={() => {\n              setSelectedList('rubros');\n              setShowModal(true);\n            }}\n          >\n            + Agregar Rubro\n          </Button>\n        </div>\n        {renderTable(rubros, 'rubros')}\n      </div>\n\n      {/* Sección de Unidades */}\n      <div className=\"mb-5\">\n        <div className=\"d-flex justify-content-between align-items-center mb-3\">\n          <h3>Unidades</h3>\n          <Button \n            variant=\"outline-primary\" \n            size=\"sm\"\n            onClick={() => {\n              setSelectedList('unidades');\n              setShowModal(true);\n            }}\n          >\n            + Agregar Unidad\n          </Button>\n        </div>\n        {renderTable(unidades, 'unidades')}\n      </div>\n\n      {/* Sección de Áreas */}\n      <div className=\"mb-5\">\n        <div className=\"d-flex justify-content-between align-items-center mb-3\">\n          <h3>Áreas</h3>\n          <Button \n            variant=\"outline-primary\" \n            size=\"sm\"\n            onClick={() => {\n              setSelectedList('areas');\n              setShowModal(true);\n            }}\n          >\n            + Agregar Área\n          </Button>\n        </div>\n        {renderTable(areas, 'areas')}\n      </div>\n\n      {/* Modal para agregar/editar */}\n      <Modal show={showModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {selectedList === 'rubros' ? 'Nuevo Rubro' : \n             selectedList === 'unidades' ? 'Nueva Unidad' : 'Nueva Área'}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Nombre</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"nombre\"\n                value={formData.nombre}\n                onChange={(e) => setFormData({ nombre: e.target.value })}\n                required\n                autoFocus\n              />\n            </Form.Group>\n            <div className=\"d-flex justify-content-end gap-2\">\n              <Button variant=\"secondary\" onClick={handleClose}>\n                Cancelar\n              </Button>\n              <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                {loading ? 'Guardando...' : 'Guardar'}\n              </Button>\n            </div>\n          </Form>\n        </Modal.Body>\n      </Modal>\n\n      <ToastContainer position=\"top-end\" className=\"p-3\" style={{ zIndex: 11 }}>\n        <Toast \n          onClose={() => setShowToast(false)} \n          show={showToast} \n          delay={3000} \n          autohide\n          bg={toastType}\n        >\n          <Toast.Header>\n            <strong className=\"me-auto\">\n              {toastType === 'success' ? 'Éxito' : 'Error'}\n            </strong>\n          </Toast.Header>\n          <Toast.Body className=\"text-white\">{toastMessage}</Toast.Body>\n        </Toast>\n      </ToastContainer>\n    </Container>\n  );\n};\n\nexport default Listas;\n"],"names":["translations","Listas","rubros","setRubros","useState","unidades","setUnidades","areas","setAreas","showModal","setShowModal","selectedList","setSelectedList","formData","setFormData","showToast","setShowToast","toastMessage","setToastMessage","toastType","setToastType","loading","setLoading","user","useAuth","useEffect","rubrosRes","unidadesRes","areasRes","api","error","showToastMessage","message","type","handleSubmit","e","endpoint","response","handleClose","errorMessage","_b","_a","handleDelete","id","listType","item","renderTable","items","React","Table","index","Button","getListTitle","Container","Row","Col","Modal","Form","ToastContainer","Toast"],"mappings":"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"}